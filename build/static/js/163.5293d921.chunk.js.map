{"version":3,"file":"static/js/163.5293d921.chunk.js","mappings":"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","sources":["components/live-streaming/LiveStreaming.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport {\n    Box,\n    Fade,\n    Container,\n    Grid,\n    CircularProgress,\n} from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport CustomDialogue from '../custom-components/CustomDialogue';\nimport AuctionCard from '../auction/auction-components/AuctionCard';\nimport AuctionHeader from '../auction/auction-components/AuctionHeader';\nimport PaginationButton from '../auction/auction-components/PaginationButton';\nimport { deleteAuction, getCurrentLiveAuctions } from '../Services/Methods';\nimport NoRecordFound from '../../utils/NoRecordFound';\nimport { ErrorMessage, SuccessMessage } from '../../utils/ToastMessages';\n\n\nconst LiveStreaming = () => {\n    const [isCurrentAuction, setIsCurrentAuction] = useState(true); // Toggle between Current and Past Auctions\n    const [selectedLocation, setSelectedLocation]: any = useState(null); // Filter by location\n    const [fadeIn, setFadeIn] = useState(false); // Fade control state\n    const [confirmDelete, setConfirmDelete] = useState(false);\n    const [deleteAuctionId, setDeleteAuctionId] = useState<string | null>(null);\n\n    const [isFetchingData, setIsFetchingData] = useState(false);\n    const [isDeleting, setIsDeleting] = useState(false);\n\n    const [filteredData, setFilteredData] = useState([]); // Filtered data state\n    const [paginationedData, setPaginationedData]: any = useState([]); // Filtered data state\n\n\n    useEffect(() => {\n        if (!isFetchingData) {\n            setIsFetchingData(true)\n            fetchLiveStreamingData();\n        }\n    }, [isCurrentAuction])\n\n    const fetchLiveStreamingData = async () => {\n        try {\n            const response = await getCurrentLiveAuctions()\n            if (response.data && response.data.length > 0) {\n                const updatedData = response.data.map((item: any) => ({\n                    id: item.Id,\n                    name: item.Name,\n                    image: item.Image,\n                    description: item.Description,\n                    isLive: item.LiveStreaming,\n                    details: {\n                        address: item.Address,\n                        location: `${item.City}, ${item.Country}`,\n                        dateRange: `${item.StartDate} to ${item.EndDate}`,\n                        lotsAvailable: item.TotalLots\n                    }\n                }));\n\n                setFilteredData(updatedData);\n                setPaginationedData(updatedData)\n            } else {\n                setFilteredData([]);\n                setPaginationedData([])\n            }\n            setIsFetchingData(false)\n\n        } catch (error) {\n            setIsFetchingData(false)\n        }\n    };\n\n    const handleDelete = async (id: string) => {\n        try {\n            // Call the delete API\n            const response: any = await deleteAuction(id);\n            if (response.status === 200) {\n                SuccessMessage('Auction deleted successfully!')\n                // Update state with filtered data if API call is successful\n                const updatedData = filteredData.filter((auction: any) => auction.id !== id);\n                setFilteredData(updatedData);\n            } else {\n                ErrorMessage('Error deleting auction!')\n            }\n        } catch (error) {\n        } finally {\n            handleCloseModal();\n        }\n    };\n\n\n    // Open confirmation modal\n    const handleDeleteAuction = (id: string) => {\n        setDeleteAuctionId(id);\n        setConfirmDelete(true);\n    };\n\n    // Close modal\n    const handleCloseModal = () => {\n        if (!isDeleting) {\n            setIsDeleting(false)\n            setConfirmDelete(false);\n            setDeleteAuctionId(null);\n        }\n    };\n\n    // Confirm deletion\n    const handleConfirmDelete = () => {\n        if (deleteAuctionId && !isDeleting) {\n            setIsDeleting(true)\n            handleDelete(deleteAuctionId); // Call the delete handler\n        }\n    };\n\n    const navigate = useNavigate()\n\n    // Handle Edit\n    const handleEdit = (id: string) => {\n        navigate(`/auction/edit?aucId=${id}`);\n    };\n\n    // Filtered Data based on `type` and `location`\n    useEffect(() => {\n\n        setFadeIn(false); // Trigger fade-out\n        setTimeout(() => {\n            setFadeIn(true); // Trigger fade-in after filtering\n            // setFilteredData(liveStreamData);\n        }, 200);\n    }, []);\n\n\n    return (\n        <Box sx={{ padding: 2 }}>\n            <AuctionHeader\n                headerType={\"live\"}\n                isCurrent={isCurrentAuction}\n                onToggle={() => setIsCurrentAuction((prev) => !prev)}\n                selectedLocation={selectedLocation}\n                setSelectedLocation={setSelectedLocation}\n                locations={[]}\n            />\n            <Box sx={{ minHeight: \"70vh\" }}>\n                {!isFetchingData && paginationedData?.length ?\n                    <Fade in={fadeIn} timeout={200}>\n                        <Container disableGutters maxWidth={false} sx={{ mt: 3 }}>\n                            <Grid container spacing={3}>\n                                {paginationedData &&\n                                    paginationedData.map((auction: any) => (\n                                        <Grid item xs={12} sm={6} md={4} xl={3} key={auction.id}>\n                                            <AuctionCard\n                                                headerType={\"live\"}\n                                                cardData={auction}\n                                                handleEdit={handleEdit}\n                                                handleDelete={() => handleDeleteAuction(auction.id)}\n                                                handleMoveModal={() => { }}\n                                            />\n                                        </Grid>\n                                    ))}\n                            </Grid>\n                        </Container>\n                    </Fade>\n\n                    : isFetchingData ?\n                        <Box\n                            sx={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                height: '70vh',\n                                width: '100%',\n                            }}\n                        >\n                            <CircularProgress size={70} disableShrink />\n                        </Box>\n                        :\n                        <NoRecordFound />\n                }\n            </Box>\n\n            <PaginationButton filteredData={filteredData} setPaginationedData={setPaginationedData} />\n\n            {/* Confirmation Modal */}\n            <CustomDialogue\n                type={\"delete\"}\n                title={\"Confirm Deletion\"}\n                message={\"Are you sure you want to delete this auction? This action cannot be undone.\"}\n                openDialogue={confirmDelete}\n                handleCloseModal={handleCloseModal}\n                handleConfirmModal={handleConfirmDelete}\n                isDeleting={isDeleting}\n            />\n\n        </Box>\n    );\n};\n\nexport default LiveStreaming;\n"],"names":["LiveStreaming","isCurrentAuction","setIsCurrentAuction","useState","selectedLocation","setSelectedLocation","fadeIn","setFadeIn","confirmDelete","setConfirmDelete","deleteAuctionId","setDeleteAuctionId","isFetchingData","setIsFetchingData","isDeleting","setIsDeleting","filteredData","setFilteredData","paginationedData","setPaginationedData","useEffect","fetchLiveStreamingData","async","response","getCurrentLiveAuctions","data","length","updatedData","map","item","id","Id","name","Name","image","Image","description","Description","isLive","details","address","Address","location","concat","City","Country","dateRange","StartDate","EndDate","lotsAvailable","TotalLots","error","handleCloseModal","navigate","useNavigate","handleEdit","setTimeout","_jsxs","Box","sx","padding","children","_jsx","AuctionHeader","headerType","isCurrent","onToggle","prev","locations","minHeight","Fade","in","timeout","Container","disableGutters","maxWidth","mt","Grid","container","spacing","auction","xs","sm","md","xl","AuctionCard","cardData","handleDelete","handleDeleteAuction","handleMoveModal","display","justifyContent","alignItems","height","width","CircularProgress","size","disableShrink","NoRecordFound","PaginationButton","CustomDialogue","type","title","message","openDialogue","handleConfirmModal","handleConfirmDelete","deleteAuction","status","SuccessMessage","filter","ErrorMessage"],"sourceRoot":""}