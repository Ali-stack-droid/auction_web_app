{"version":3,"file":"static/js/850.5f946c67.chunk.js","mappings":"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","sources":["components/dashboard/DashboardStyles.tsx","components/dashboard/Dashboard.tsx"],"sourcesContent":["import { makeStyles } from \"@mui/styles\";\n\nconst useDashboardStyles = makeStyles((theme: any) => ({\n    root: {\n        padding: \"20px\",\n    },\n    title: {\n        fontSize: '30px',\n        fontWeight: 600,\n        color: theme.palette.primary.main,\n        paddingBottom: \"20px\"\n    },\n    dashboardContainer: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        gap: \"10px\",\n    },\n    card: {\n        width: \"350px\",\n        borderRadius: \"14px\",\n        border: `1px solid ${theme.palette.primary.main4}`,\n    },\n    cardHeader: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginBottom: \"5px\",\n    },\n    cardTitle: {\n        fontSize: \"16px\",\n        color: theme.palette.primary.main10,\n    },\n    cardIcon: {\n        color: theme.palette.primary.main,\n    },\n    cardValue: {\n        fontSize: \"24px\",\n        color: theme.palette.primary.main8,\n        marginBottom: \"8px\",\n    },\n    cardDate: {\n        fontSize: \"16px\",\n        color: theme.palette.primary.main2,\n    },\n    cardChart: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: \"12px\",\n    },\n}));\n\nexport default useDashboardStyles;\n","import { Box, Card, CardContent, CircularProgress, Tooltip, Typography } from \"@mui/material\";\nimport useDashboardStyles from \"./DashboardStyles\";\nimport PriceChangeRoundedIcon from \"@mui/icons-material/PriceChangeRounded\";\nimport PendingActionsRoundedIcon from \"@mui/icons-material/PendingActionsRounded\";\nimport CategoryRoundedIcon from \"@mui/icons-material/CategoryRounded\";\nimport MilitaryTechRoundedIcon from \"@mui/icons-material/MilitaryTechRounded\";\nimport { ResponsiveContainer, BarChart, Bar } from \"recharts\";\nimport theme from \"../../theme\";\nimport { useEffect, useState } from \"react\";\nimport { getCurrentAuctions, getDashboardStatistics } from \"../Services/Methods\";\n\nconst Dashboard = () => {\n    const classes = useDashboardStyles();\n    const [isFetching, setIsFetching] = useState(false)\n    const [statistics, setStatistics]: any = useState([])\n\n    const data = [\n        {\n            title: \"Total Amount Received\",\n            value: \"$ 20,000+\",\n            date: \"9 February 2024\",\n            icon: <PriceChangeRoundedIcon className={classes.cardIcon} />,\n        },\n        {\n            title: \"Total Amount Pending\",\n            value: \"$ 8,000+\",\n            date: \"12 January 2024\",\n            icon: <PendingActionsRoundedIcon className={classes.cardIcon} />,\n        },\n        {\n            title: \"Total Products\",\n            value: \"20,000+\",\n            date: \"2 December 2024\",\n            icon: <CategoryRoundedIcon className={classes.cardIcon} />,\n        },\n        {\n            title: \"Total Products Sold\",\n            value: \"16,000+\",\n            date: \"9 February 2024\",\n            icon: <MilitaryTechRoundedIcon className={classes.cardIcon} />,\n        },\n    ];\n\n    useEffect(() => {\n        const fetchAuctionData = async () => {\n            setIsFetching(true)\n            try {\n                const response = await getDashboardStatistics();\n\n                const updatedData = response.data;\n                if (updatedData) {\n                    setStatistics([\n                        {\n                            title: \"Total Amount Received\",\n                            value: `$ ${Number(updatedData.TotalPaid).toLocaleString()}+`,\n                            date: \"9 February 2024\",\n                            icon: <PriceChangeRoundedIcon className={classes.cardIcon} />,\n                        },\n                        {\n                            title: \"Total Amount Pending\",\n                            value: `$ ${Number(updatedData.PendingAmount).toLocaleString()}+`,\n                            date: \"12 January 2024\",\n                            icon: <PendingActionsRoundedIcon className={classes.cardIcon} />,\n                        },\n                        {\n                            title: \"Total Products\",\n                            value: `${Number(updatedData.TotalLots).toLocaleString()}+`,\n                            date: \"2 December 2024\",\n                            icon: <CategoryRoundedIcon className={classes.cardIcon} />,\n                        },\n                        {\n                            title: \"Total Products Sold\",\n                            value: `${Number(updatedData.SoldLots).toLocaleString()}+`,\n                            date: \"9 February 2024\",\n                            icon: <MilitaryTechRoundedIcon className={classes.cardIcon} />,\n                        },\n                    ]);\n                } else {\n                    setStatistics({});\n                }\n\n            } catch (error) {\n            } finally {\n                setIsFetching(false); // Set loading state to false when the call ends\n            }\n        };\n        fetchAuctionData();\n    }, []);\n\n    const chartData = [\n        { name: 'January', sales: 2000, products: 400 },\n        { name: 'February', sales: 4000, products: 450 },\n        { name: 'March', sales: 3000, products: 700 },\n        { name: 'April', sales: 2000, products: 800 },\n        { name: 'May', sales: 1000, products: 900 },\n        { name: 'June', sales: 3000, products: 1200 },\n        { name: 'July', sales: 5000, products: 1500 },\n        { name: 'August', sales: 5500, products: 1800 },\n    ]\n\n    return (\n        <Box sx={{ padding: 2 }}>\n            <Typography className={classes.title}>Statistics of Dashboard</Typography>\n            {!isFetching ?\n                <Box className={classes.dashboardContainer}>\n                    {statistics.length !== 0 && statistics.map((item: any, index: number) => (\n                        <Card key={index} className={classes.card} elevation={0}>\n                            <CardContent>\n                                <Box>\n                                    <Box className={classes.cardHeader}>\n                                        <Typography className={classes.cardTitle}>\n                                            {item.title}\n                                        </Typography>\n                                        {item.icon}\n                                    </Box>\n                                    <Typography className={classes.cardValue}>\n                                        {item.value}\n                                    </Typography>\n                                </Box>\n                                <Box sx={{ display: 'flex', alignItems: 'end', justifyContent: \"space-between\" }}>\n                                    <Typography className={classes.cardDate}>\n                                        {item.date}\n                                    </Typography>\n                                    <ResponsiveContainer width=\"50%\" height={100} style={{ gap: 3 }}>\n                                        <BarChart data={chartData}>\n                                            <Bar dataKey=\"sales\" fill={theme.palette.primary.main} />\n                                        </BarChart>\n                                    </ResponsiveContainer>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    ))}\n                </Box>\n                :\n                <Box\n                    sx={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        height: '70vh',\n                        width: '100%',\n                    }}\n                >\n                    <CircularProgress size={70} disableShrink />\n                </Box>\n            }\n        </Box>\n    );\n};\n\nexport default Dashboard;\n"],"names":["useDashboardStyles","makeStyles","theme","root","padding","title","fontSize","fontWeight","color","palette","primary","main","paddingBottom","dashboardContainer","display","flexWrap","gap","card","width","borderRadius","border","concat","main4","cardHeader","justifyContent","alignItems","marginBottom","cardTitle","main10","cardIcon","cardValue","main8","cardDate","main2","cardChart","marginTop","Dashboard","classes","isFetching","setIsFetching","useState","statistics","setStatistics","PriceChangeRoundedIcon","PendingActionsRoundedIcon","CategoryRoundedIcon","MilitaryTechRoundedIcon","useEffect","async","updatedData","getDashboardStatistics","data","value","Number","TotalPaid","toLocaleString","date","icon","_jsx","className","PendingAmount","TotalLots","SoldLots","error","fetchAuctionData","chartData","name","sales","products","_jsxs","Box","sx","children","Typography","height","CircularProgress","size","disableShrink","length","map","item","index","Card","elevation","CardContent","ResponsiveContainer","style","BarChart","Bar","dataKey","fill"],"sourceRoot":""}