{"version":3,"file":"static/js/881.5567c5fb.chunk.js","mappings":"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","sources":["components/payment-tracking/PaymentTrackingStyles.tsx","components/payment-tracking/PaymentViewModal.tsx","components/payment-tracking/PaymentTracking.tsx"],"sourcesContent":["import { makeStyles } from \"@mui/styles\";\n\nconst usePaymentTrackingStyles = makeStyles((theme: any) => ({\n    header: {\n        display: 'flex',\n        alignItems: 'start',\n        justifyContent: 'space-between',\n    },\n    title: {\n        fontSize: '30px',\n        fontWeight: 600,\n        color: theme.palette.primary.main,\n        paddingBottom: \"20px\"\n    },\n    toggleContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px solid #E2E8F0',\n        height: '40px',\n        borderRadius: '5px',\n        minWidth: '260px',\n        maxWidth: '260px',\n    },\n    toggleButton: {\n        textTransform: 'none',\n        transition: 'background 0.25s ease-in-out, color 0.3s ease-in-out, font-size 0.25s ease-in-out',\n        border: 'none',\n        borderRadius: '5px !important',\n        width: \"120px\",\n        '&.pending': {\n            fontSize: '11px',\n            backgroundColor: `${theme.palette.primary.main} !important`,\n            color: 'white !important',\n        },\n        '&.paid': {\n            fontSize: '10px',\n            backgroundColor: 'inherit',\n            color: `${theme.palette.primary.main5} !important`,\n        },\n    },\n    paymentTable: {\n        maxWidth: '100%',\n        border: '1px solid #E2E8F0',\n        '& td': {\n            fontSize: '16px',\n            color: '#2A2A2A'\n        },\n        '& th': {\n            fontSize: '18px'\n        },\n        '& td th': {\n            textAlign: 'left',\n            whiteSpace: 'nowrap',\n            width: \"fit-content\",\n            fontSize: '12px'\n        },\n        // Center last two columns (th and td)\n        '& th:last-child, & td:last-child': {\n            textAlign: 'center',\n        },\n        '& th:nth-last-child(2), & td:nth-last-child(2)': {\n            textAlign: 'center',\n        },\n    },\n    paginationWrapper: {\n        display: \"flex\",\n        justifyContent: 'end',\n        alignItems: 'center',\n        padding: \"30px 0\"\n    },\n    viewButton: {\n        width: \"100px\",\n        backgroundColor: \"#377DFF\",\n        textTransform: \"none\",\n        fontSize: '15px',\n    },\n    status: {\n        width: \"100px\",\n        textTransform: \"none\",\n        fontSize: '15px',\n        color: 'white',\n        '&.active': {\n            backgroundColor: \"#009045\",\n        },\n        '&.inactive': {\n            backgroundColor: '#FF0000',\n        },\n    },\n}));\n\nexport default usePaymentTrackingStyles;\n","import { Dialog, DialogContent, IconButton, Typography, Box, Divider } from '@mui/material';\nimport ClearRoundedIcon from '@mui/icons-material/ClearRounded';\nimport useWinnerModalStyle from '../auction/detail-pages/detail-pages-components/WinnerModalStyles';\n\nconst PaymentViewModal = ({ open, onClose, invoice }: any) => {\n    const classes = useWinnerModalStyle();\n\n    return (\n        <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"sm\">\n            <Box p={2}>\n                {/* Header */}\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', paddingBottom: \"5px\" }}>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        Invoice Details\n                    </Typography>\n                    <IconButton onClick={onClose}>\n                        <ClearRoundedIcon\n                            sx={{\n                                color: 'black',\n                                padding: \"1px\",\n                                border: \"1px solid #676767\",\n                                borderRadius: \"50px\"\n                            }}\n                        />\n                    </IconButton>\n                </Box>\n                <Divider sx={{ py: 1 }} />\n\n                <DialogContent className={classes.modalContent}>\n                    {/* Invoice Details */}\n                    {invoice ? (\n                        <Box style={{ padding: '10px' }}>\n                            {[\n                                // { label: 'Invoice ID', value: invoice.invoiceId },\n                                { label: 'Name', value: invoice.name },\n                                { label: 'Email', value: invoice.email },\n                                { label: 'Total Amount', value: `$${invoice.amount}` },\n                                { label: 'Paid Amount', value: `$${invoice.paidAmount}` },\n                                { label: 'Pending Amount', value: `$${invoice.amount - invoice.paidAmount}` },\n                                { label: 'Deadline', value: invoice.deadline },\n                                { label: 'Status', value: invoice.status },\n                                // { label: 'Payment Method', value: invoice.paymentMethod },\n                            ].map((detail, index) => (\n                                <Box\n                                    key={index}\n                                    className={classes.bidderDetails}\n                                >\n                                    <Box sx={{ flex: 0.3 }}>\n                                        <Typography textAlign={'left'} className={classes.bidderHeading}>\n                                            {detail.label}:\n                                        </Typography>\n                                    </Box>\n                                    <Box sx={{ flex: 0.7 }}>\n                                        <Typography textAlign={'left'} className={classes.paymentValue}>\n                                            {detail.value}\n                                        </Typography>\n                                    </Box>\n                                </Box>\n                            ))}\n                        </Box>\n                    ) : (\n                        <Box className={classes.noBidder}>\n                            <Typography>No Invoice Found!</Typography>\n                        </Box>\n                    )}\n                </DialogContent>\n            </Box>\n        </Dialog>\n    );\n};\n\nexport default PaymentViewModal;\n","import { Box, Typography, Table, TableBody, TableCell, TableHead, TableRow, Pagination, Stack, Button, ToggleButton, ToggleButtonGroup, Fade, CircularProgress } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport usePaymentTrackingStyles from \"./PaymentTrackingStyles\";\nimport { getPaidInvoices, getPendingInvoices, invoiceReminder } from \"../Services/Methods\";\nimport NoRecordFound from \"../../utils/NoRecordFound\";\nimport PaymentViewModal from \"./PaymentViewModal\";\nimport theme from \"../../theme\";\nimport { ErrorMessage } from \"../../utils/ToastMessages\";\n\nconst PaymentTracking = () => {\n    const classes = usePaymentTrackingStyles();\n\n    const [invoices, setInvoices]: any = useState([]);\n    const [isFetchingData, setIsFetchingData] = useState(false);\n\n    const [page, setPage] = useState<number>(0);\n    const [selectedInvoice, setSelectedInvoice] = useState({});\n    const [paidInvoice, setPaidInvoice] = useState<boolean>(false);\n    const [isReminding, setIsReminding] = useState<boolean>(false);\n    const [viewDetails, setViewDetails] = useState(false);\n    const rowsPerPage = 10;\n\n    useEffect(() => {\n        fetchInvoices();\n    }, [paidInvoice])\n\n    const fetchInvoices = async () => {\n        setIsFetchingData(true)\n        try {\n            const response = paidInvoice\n                ? await getPaidInvoices()\n                : await getPendingInvoices();\n\n            if (response.data && response.data.length > 0) {\n                const formattedInvoices = response.data.map((invoice: any) => ({\n                    invoiceId: invoice.Id,\n                    name: invoice.Name,\n                    email: invoice.Email,\n                    amount: invoice.TotalAmount,\n                    deadline: invoice.Date,\n                    status: invoice.Status,\n                    totalLots: invoice.TotalLots,\n                    paidAmount: invoice.PaidAmount,\n                    pendingAmount: invoice.Pending,\n                    paymentMethod: invoice.PaymenMethod,\n                }));\n                setInvoices(formattedInvoices);\n            } else {\n                setInvoices([]);\n            }\n        } catch (error) {\n        } finally {\n            setIsFetchingData(false)\n        }\n    };\n\n    const handleChangePage = (_event: React.ChangeEvent<unknown>, newPage: number) => {\n        setPage(newPage - 1); // Adjust for 0-based index\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setPage(0);\n    };\n\n    const handleToggleInvoice = () => {\n        if (!isFetchingData) {\n            setPage(0);\n            setPaidInvoice(!paidInvoice);\n        }\n    }\n    const handleViewButton = (ind: number) => {\n        setSelectedInvoice(invoices[ind]);\n        setViewDetails(true)\n    }\n    // Calculate the number of pages based on the length of tableData\n    const totalPages = Math.ceil(invoices.length / rowsPerPage);\n    const formatDate = (dateStr: string) => {\n        const [day, month, year] = dateStr.split(\"-\");\n        return `${month}-${day}-${year}`;\n    };\n\n    const handleInvoiceReminder = async (payload: any) => {\n\n        setIsReminding(true)\n\n        try {\n            const response = await invoiceReminder(payload);\n            if (response) {\n                console.log(response)\n            }\n        } catch (error) {\n            ErrorMessage('Failed to send reminder')\n        } finally {\n            setIsReminding(false)\n        }\n    }\n\n    return (\n        <Box sx={{ padding: 2 }}>\n            <Box className={classes.header}>\n                <Typography className={classes.title}>{paidInvoice ? \"Paid Invoices\" : \"Pending Invoices\"}</Typography>\n                <Box className={classes.toggleContainer}>\n                    <ToggleButtonGroup\n                        value={paidInvoice ? 'paid' : 'pending'}\n                        exclusive\n                        onChange={handleToggleInvoice}\n                        sx={{ maxHeight: '30px' }}\n                    >\n                        <ToggleButton\n                            value=\"pending\"\n                            className={`${classes.toggleButton} ${paidInvoice ? 'paid' : 'pending'}`}\n                        >\n                            Pending Invoices\n                        </ToggleButton>\n                        <ToggleButton\n                            value=\"paid\"\n                            className={`${classes.toggleButton} ${!paidInvoice ? 'paid' : 'pending'}`}\n                        >\n                            Paid Invoices\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </Box>\n            </Box>\n\n            {!isFetchingData && invoices.length > 0 ?\n                <Box>\n                    <Table className={classes.paymentTable} aria-label=\"simple table\">\n                        <TableHead sx={{ backgroundColor: '#19549F' }}>\n                            <TableRow>\n                                <TableCell sx={{ color: \"white\" }}>Invoice ID</TableCell>\n                                <TableCell sx={{ color: \"white\" }}>Name</TableCell>\n                                <TableCell sx={{ color: \"white\" }}>Email</TableCell>\n                                <TableCell sx={{ color: \"white\" }}>Amount</TableCell>\n                                <TableCell sx={{ color: \"white\" }}>Deadline</TableCell>\n                                <TableCell sx={{ color: \"white\" }}>Details</TableCell>\n                                <TableCell sx={{ color: \"white\" }}>Status</TableCell>\n                                {!paidInvoice && <TableCell sx={{ color: \"white\" }}>Action</TableCell>}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {invoices.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row: any, index: number) => (\n                                <TableRow key={row.invoiceId}>\n                                    <TableCell>{row.invoiceId}</TableCell>\n                                    <TableCell>{row.name}</TableCell>\n                                    <TableCell>{row.email}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                    <TableCell>{row.deadline}</TableCell>\n                                    <TableCell>\n                                        <Button variant={'contained'} className={classes.viewButton} onClick={() => handleViewButton(index)}>View</Button>\n                                    </TableCell>\n                                    <TableCell>\n                                        {paidInvoice ?\n                                            <Button variant={'contained'} className={`${classes.status} ${'active'}`}>\n                                                Paid\n                                            </Button>\n                                            :\n                                            <Button variant={'contained'} className={`${classes.status} ${row.status ? 'active' : 'inactive'}`}>\n                                                {row.status ? \"Active\" : \"Inactive\"}\n                                            </Button>\n                                        }\n                                    </TableCell>\n                                    {!paidInvoice &&\n                                        <TableCell>\n                                            <Button\n                                                variant={'contained'}\n                                                className={`${classes.status} ${'active'}`}\n                                                onClick={() => handleInvoiceReminder({ Email: 'parkerauction369@gmail.com', Amount: row.amount, DueDate: formatDate(row.deadline) })}\n                                            >\n                                                {isReminding ? <CircularProgress size={25} sx={{ color: theme.palette.primary.main3 }} /> : 'Remember'}\n                                            </Button>\n                                        </TableCell>\n                                    }\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    <Box className={classes.paginationWrapper}>\n                        <Stack spacing={0}>\n                            <Pagination\n                                count={totalPages} // Set the total pages dynamically\n                                page={page + 1} // Adjust for 1-based index\n                                onChange={handleChangePage}\n                                variant=\"outlined\"\n                                shape=\"rounded\"\n                            />\n                        </Stack>\n                    </Box>\n                </Box>\n                : isFetchingData ?\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            height: '70vh',\n                            width: '100%',\n                        }}\n                    >\n                        <CircularProgress size={70} disableShrink />\n                    </Box>\n                    :\n                    <Box sx={{ maxHeight: \"65vh\" }}>\n                        <NoRecordFound />\n                    </Box>\n            }\n\n            <PaymentViewModal open={viewDetails} onClose={() => setViewDetails(false)} invoice={selectedInvoice} />\n        </Box >\n    );\n};\n\nexport default PaymentTracking;\n"],"names":["usePaymentTrackingStyles","makeStyles","theme","header","display","alignItems","justifyContent","title","fontSize","fontWeight","color","palette","primary","main","paddingBottom","toggleContainer","border","height","borderRadius","minWidth","maxWidth","toggleButton","textTransform","transition","width","backgroundColor","concat","main5","paymentTable","textAlign","whiteSpace","paginationWrapper","padding","viewButton","status","_ref","open","onClose","invoice","classes","useWinnerModalStyle","_jsx","Dialog","fullWidth","children","_jsxs","Box","p","sx","Typography","variant","className","IconButton","onClick","ClearRoundedIcon","Divider","py","DialogContent","modalContent","style","label","value","name","email","amount","paidAmount","deadline","map","detail","index","bidderDetails","flex","bidderHeading","paymentValue","noBidder","PaymentTracking","invoices","setInvoices","useState","isFetchingData","setIsFetchingData","page","setPage","selectedInvoice","setSelectedInvoice","paidInvoice","setPaidInvoice","isReminding","setIsReminding","viewDetails","setViewDetails","useEffect","fetchInvoices","async","response","getPaidInvoices","getPendingInvoices","data","length","formattedInvoices","invoiceId","Id","Name","Email","TotalAmount","Date","Status","totalLots","TotalLots","PaidAmount","pendingAmount","Pending","paymentMethod","PaymenMethod","error","totalPages","Math","ceil","formatDate","dateStr","day","month","year","split","ToggleButtonGroup","exclusive","onChange","handleToggleInvoice","maxHeight","ToggleButton","Table","TableHead","TableRow","TableCell","TableBody","slice","row","Button","invoiceReminder","payload","console","log","ErrorMessage","handleInvoiceReminder","Amount","DueDate","CircularProgress","size","main3","Stack","spacing","Pagination","count","handleChangePage","_event","newPage","shape","disableShrink","NoRecordFound","PaymentViewModal"],"sourceRoot":""}